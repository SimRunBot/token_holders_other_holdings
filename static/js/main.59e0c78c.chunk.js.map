{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","loading","tokenHolders","appState","setAppState","input","setInput","limitHolders","setLimitHolders","apiKey","setApiKey","darkMode","setDarkMode","inputTokenInfo","setInputTokenInfo","addressInputError","setAddressInputError","limitInputError","setLimitInputError","networkErrorOccured","setNetworkErrorOccured","networkError","setNetworkError","handleTokenAddressChange","changedInput","newInput","event","target","value","length","handleApiKeyChange","changedApiKey","newApiKey","handleLimitHoldersChange","changedLimitHolders","newLimitHolders","parseInt","handleNetworkError","error","response","console","log","data","status","headers","request","message","config","ErrorComponent","props","addressError","dark","type","limitError","networkErrorHappened","networkErrorObject","TokenInfoComponent","tokenInfo","name","symbol","price","rate","toFixed","owner","holdersCount","OtherTokenListComponent","otherTokens","map","otherToken","index","active","raised","rounded","className","OtherTokenComponent","address","balance","decimals","otherTokenBalance","href","HoldersOtherHoldingsComponent","tokens","sort","a","b","HolderListItemComponent","showOtherTokens","setShowOtherTokens","showOtherTokensButtonPressed","setShowOtherTokensButtonPressed","tokenHoldersOtherHoldings","setTokenHoldersOtherHoldings","useEffect","isMounted","getTokens","addressInfoApiUrl","axios","get","then","addressInfoResponse","catch","holdersBalance","holdersValue","share","color","bgColor","onClick","flat","width","HolderListComponent","holders","numHolders","holder","undefined","getTokenHoldersAndInfo","tokenholdersApiUrl","tokenAddressApiUrl","all","spread","holdersResponse","tokenAddressResponse","depressed","onChange","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59e0c78c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'ui-neumorphism/dist/index.css';\n/* UI library component imports */\nimport { overrideThemeVariables } from 'ui-neumorphism';\nimport { \n  Button,\n  Card,\n  CardContent,\n  Divider,\n  ListItemGroup,\n  ListItem,\n  TextField,\n  H3,\n  H4,\n  H5,\n  H6,\n  Body1,\n  Alert\n  } from 'ui-neumorphism';\n\nfunction App() {\n\n  /* input state variables */\n  const [appState, setAppState] = useState({\n    loading: false,\n\t  tokenHolders: null\n   });\n  const [input, setInput] = useState(\"\");\n  const [limitHolders, setLimitHolders] = useState(10);\n  const [apiKey, setApiKey] = useState(\"EK-nYME2-u6tTYfo-L5LES\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [inputTokenInfo, setInputTokenInfo] = useState(null);\n  /* Error state variables */\n  const [addressInputError,setAddressInputError] = useState();\n  const [limitInputError,setLimitInputError] = useState(false);\n  const [networkErrorOccured, setNetworkErrorOccured] = useState(false);\n  const [networkError, setNetworkError] = useState(null);\n\n  useEffect( () => {\n      /* checks if input fields contain errors \n      and exit out if they do to prevent failed api request*/\n      if (addressInputError === undefined || addressInputError || limitInputError ) return ;\n      \n      setAppState({ loading:true});\n\n      async function getTokenHoldersAndInfo(){\n        const tokenholdersApiUrl = \n          `https://api.ethplorer.io/getTopTokenHolders/${input}?apiKey=${apiKey}&limit=${limitHolders}`;\n        const tokenAddressApiUrl = \n          `https://api.ethplorer.io/getAddressInfo/${input}?apiKey=${apiKey}`;\n          \n        axios.all([\n          axios.get(tokenholdersApiUrl),\n          axios.get(tokenAddressApiUrl)])\n            .then(axios.spread(\n              (holdersResponse, tokenAddressResponse) => {\n                setAppState({ loading: false, \n                              tokenHolders: holdersResponse.data.holders\n                });\n                /* saving only the tokenInfo in state, as rest is not relevant */\n                setInputTokenInfo(tokenAddressResponse.data.tokenInfo);\n                }))\n            .catch((error)=> {\n              handleNetworkError(error);\n            });\n      }\n      /** solution to call async function inside useEffect **/\n      getTokenHoldersAndInfo();\n\n      /** cleanup function **/\n\t\t  return () => { setAppState({ loading:false});  };\n\n      }, \n    /** useEffect dependencies to only call useEffect when these change **/ \n    [input, apiKey, limitHolders]);\n  \n\n  /** Handler Functions for Input changes and simple input validation **/\n  \n  function handleTokenAddressChange(changedInput) {\n\t  const newInput = changedInput.event.target.value;\n\t  /** all ethereum token addresses are 42 characters long **/\n\t  if (newInput.length == 42){\n\t\t  setAddressInputError(false);\n\t\t  setInput(newInput);\n\t    } \n      else {\n\t\t  setAddressInputError(true);\n\t    }\n    }\n  \n  function handleApiKeyChange(changedApiKey) {\n\t  const newApiKey = changedApiKey.event.target.value;\n      setApiKey(newApiKey);\n    }\n\t\n  function handleLimitHoldersChange(changedLimitHolders) {\n\t  const newLimitHolders = changedLimitHolders.event.target.value;\n\t  /** parseInt converts floats to ints and returns NaN when input is string **/\n\t  if (parseInt(newLimitHolders) > 0 \n        && parseInt(newLimitHolders) <= 1000){\n          setLimitInputError(false);\n          setLimitHolders(newLimitHolders);\n\t  }\n\t  else {\n\t\t  setLimitInputError(true);\n\t    }\n    }\n\n  function handleNetworkError(error){\n    setNetworkErrorOccured(true);\n    setNetworkError(error);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  }\n\n  /** INPUT Components **/\n  \n  function AddressInputComponent(props){\n\t  return(\n\t    <>\n\t      <h2> ERC20 Token Address </h2>\n        <TextField \n          rounded\n          width={500} \n          type=\"text\" \n          onChange={handleTokenAddressChange} />\n        <p> { appState.tokenHolders? \n              \"\" \n              : \"Ex.: 0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30\" } \n        </p>\n\t\t  </>\n\t  );\n  }\n  \n  function ApiKeyInputComponent(props){\n\t  return(\n\t    <>\n        <h2>API-Key</h2>\n        <TextField \n          rounded\n          type=\"text\" \n          placeholder={apiKey} \n          onChange={handleApiKeyChange} />\n        <p> { appState.tokenHolders? \n              \"\" \n              : \"Ex.: EK-nYME2-u6tTYfo-L5LES\" } \n        </p>\n\t\t  </>\n\t  );\n  }\n  \n  function LimitHolderInputComponent(props){\n\t  return (\n\t\t<>\n\t\t  <h2> # of Top Holders </h2>\n\t\t  <TextField \n        rounded\n        width={100} \n        type=\"text\" \n        placeholder=\"10\" \n        onChange={handleLimitHoldersChange} />\n          <p> { appState.tokenHolders? \n                  \"\" \n                  : \"1-1000\" } \n          </p>\n\t\t</>\n\t  );\n  }\n  \n  \n  /** OUTPUT Components **/\n\n  function ErrorComponent(props){\n    /** renders possible input errors to the user */\n    \n    return(\n      <>\n        {props.addressError?\n          <Alert \n            dark={darkMode?true:false}\n            type=\"error\">\n              Input Error : invalid Token Address input\n          </Alert>\n          : \"\"\n        }\n\n        {props.limitError?\n          <Alert \n            dark={darkMode?true:false}\n            type=\"error\">\n              Input Error : only integers between 1-1000 allowed for # of Top Holders\n          </Alert>\n          : \"\"\n        }\n\n        {props.networkErrorHappened?\n          <Alert \n            dark={ darkMode? true : false }\n            type=\"error\">\n              Network Error occured, Check Console { (props.networkErrorObject == null)? \"\" : props.networkErrorObject.message }\n          </Alert>\n          : \"\"\n        }\n\n      </>\n    );\n  }\n  \n  function TokenInfoComponent(props){\n\t  /** shows info about the token from address input **/\n   \n\t  /**  tokenInfo only gets accessible after first API call\n     * so we do a little bit of conditional rendering here **/\n     if (!props.tokenInfo) return \"\";\n\t  return(\n\t    <>\n        {props.tokenInfo?\n          <CardContent\n            dark={darkMode}>\n              <H6> {`${props.tokenInfo.name} (${props.tokenInfo.symbol})`} </H6>\n              <H6> Price: {props.tokenInfo.price.rate? \n                            props.tokenInfo.price.rate.toFixed(2)\n                            :  \"unknown price\"} $ \n              </H6>\n              <Body1>\n                Owner: {props.tokenInfo.owner}\n              </Body1>\n              <Body1>  \n                Holders: {props.tokenInfo.holdersCount}\n              </Body1>\n            \n          </CardContent>\n          : \"\"\n          }\n\t\t  </>\n\t\t);\n\t  \n  }\n\n  function OtherTokenListComponent(props){\n    /* Holds List of the other tokens held by parent address */\n    return(\n      <>\n        {props.otherTokens.map((otherToken, index) => {\n          return(\n            <ListItem\n              key={index}\n              dark={darkMode}\n              active\n              raised\n              rounded\n              className=\"OtherTokenListItem-class\"> \n\n                <OtherTokenComponent\n                  address={otherToken.tokenInfo.address}\n                  name={otherToken.tokenInfo.name}\n                  index={index}\n                  symbol={otherToken.tokenInfo.symbol}\n                  balance={otherToken.balance}\n                  decimals={otherToken.tokenInfo.decimals > 0? otherToken.tokenInfo.decimals : 1}\n                  price={otherToken.tokenInfo.price.rate}/>\n\n            </ListItem>\n          );\n        })}\n      </>\n    );\n  }\n  \n  function OtherTokenComponent(props){\n\t  /** gives info about the other token that parent hodler has **/\n    \n    const otherTokenBalance = (props.balance / 10 ** props.decimals).toFixed(5);\n    return (\n      <> \n        <H6 dark={darkMode}>\n          <a \n            href={`https://etherscan.io/token/${props.address}`} \n            target=\"_blank\">\n              {`${props.name} (${props.symbol})`}\n          </a>\n        </H6>\n        <H6 \n          dark={darkMode}> \n            Tokens: {otherTokenBalance} \n        </H6>\n        <H6 \n          dark={darkMode}> \n            {props.price?\n              `Value: ${(props.price * otherTokenBalance).toFixed(2)} $` \n              : `price rate unknown`} \n        </H6>\n      </>\n    );\n  }\n  \n  function HoldersOtherHoldingsComponent(props){\n\t  /** Shows other Tokens of parent holder \n     *  address once UI Button is pressed **/\n\n    /* tokens are sorted based on value in descending order\n        calculated by custom comparison function  */\n   \n    const sortedOtherTokens = props.tokens.sort(\n        (a,b) => {\n          if(a.tokenInfo.price && b.tokenInfo.price){\n            return ( \n              ( (b.balance / 10 ** b.tokenInfo.decimals ) \n              * b.tokenInfo.price.rate \n              - (a.balance / 10 ** a.tokenInfo.decimals ) \n              * a.tokenInfo.price.rate) \n              );\n          }\n          else if(a.tokenInfo.price && !b.tokenInfo.price){\n            return -1;\n          }\n          else if(!a.tokenInfo.price && b.tokenInfo.price){\n            return 1;\n          }\n          else {\n            return 0;\n          }\n        }\n    );\n\n\t  return(\n\t    <>\n        <H6 dark={darkMode}>{props.tokens.length > 1 ?\n            `${props.tokens.length} other Tokens on this Holders address`\n            : `${props.tokens.length} other Token on this Holders address`\n            }  \n        </H6>\n        <OtherTokenListComponent\n          otherTokens={props.tokens}/>\n      </>\n\t    );\n  }\n  \n  \n  function HolderListItemComponent(props){\n\t  /** is showing the holder of token from address input **/\n\t  const [showOtherTokens, setShowOtherTokens] = useState(false);\n\t  const [showOtherTokensButtonPressed, setShowOtherTokensButtonPressed] = useState(false);\n\t  const [tokenHoldersOtherHoldings, setTokenHoldersOtherHoldings] = useState();\n\t  \n\t  useEffect( () => {\n\t\t \n\t\t  /** condition to avoid the warning of hook usage before component mounting **/\n\t\t  let isMounted = true;\n\t\t  /** prevent apicall if not intended **/\n\t\t  if(!showOtherTokens) return ;\n\t\t  /** prevent apicall of wrong address or apiKey input **/\n\t\t  if (!props.address === \"\" || !props.address || !props.apiKey){\n\t\t\t  return ;\n\t\t    }\n\t\t  \n\t\t  async function getTokens(){\n\t\t\t  const addressInfoApiUrl = \n          `https://api.ethplorer.io/getAddressInfo/${props.address}?apiKey=${props.apiKey}`;\n\t\t      await axios.get(addressInfoApiUrl)\n\t\t        .then((addressInfoResponse) => {\n\t\t\t        if (isMounted) setTokenHoldersOtherHoldings(addressInfoResponse.data);\n              })\n            .catch((error)=> {\n              handleNetworkError(error);\n            });\n\t\t    }\n\n\t\t  getTokens();\n\t\t\t/** cleanup function **/\n\t\t  return () => { isMounted = false };\n\t\t } \n\t\t,[showOtherTokens]);\n\t\t\n\t  function handleShowOtherTokensButtonPressed(event){\n\t\t  setShowOtherTokens(!showOtherTokens);\n\t\t  setShowOtherTokensButtonPressed(!showOtherTokensButtonPressed);\n\t  }\n\n\t\tconst holdersBalance = (props.balance/ 10 ** props.decimals).toFixed(2);\n    const holdersValue = (props.price * holdersBalance).toFixed(2);\n\n\t  /**  tokenHoldersOtherHoldings only gets accessible after first apicall  **/\n    /** and holders other tokens only after pressing the listitems button **/  \n\t  return(\n      <>\n        <H5 dark={darkMode}> #{props.index + 1} </H5>\n        <H5 dark={darkMode}> Share: {props.share} % </H5>\n        <H5 dark={darkMode}> \n          Tokens: {holdersBalance}\n        </H5>\n        <H5 dark={darkMode}> Value: {holdersValue} $ </H5>\n        <H5 dark={darkMode}> \n          Address: <a \n                    href={`https://etherscan.io/address/${props.address}`} \n                    target=\"_blank\">\n                      {props.address}\n                  </a> \n        </H5>\n        \n\n        <Button \n          className=\"showOtherTokensButton\"\n          color={showOtherTokensButtonPressed? 'var(--black)' : 'var(--white)'}\n          bgColor={showOtherTokensButtonPressed? 'var(--primary-red)' : 'var(--primary)'}\n          dark={darkMode}\n          rounded\n          onClick={handleShowOtherTokensButtonPressed}> \n            {!showOtherTokens? \"Show Holders other tokens\" : \"Hide Holders other tokens\" } \n        </Button>\n          {tokenHoldersOtherHoldings && showOtherTokens?\n            <Card\n              flat\n              width={400}\n              className=\"HoldersOtherHoldingsComponent-container\"\n              >\n                <HoldersOtherHoldingsComponent  \n                tokens={tokenHoldersOtherHoldings.tokens} />   \n            </Card>\n            : \"\"\n            }\n\t\t    </>\n\t\t  );\n  }\n  \n  function HolderListComponent(props){\n\t  /** Lists the top (# of) Holders of input token address  **/\n    \n\n    if (props.holders == null|| props.tokenInfo == null) return \"\";\n    return (\n      <>\n        <H5 \n          className='list-head'\n          dark={darkMode}>\n            Tokens Top {props.numHolders} Holders\n        </H5>\n\n        <ListItemGroup\n          rounded\n          dark={darkMode}\n          raised>\n                    \n            {props.holders.map((holder, index) => {\n              return(\n                <ListItem\n                  className=\"ListItem-class\"\n                  active\n                  dark={darkMode}\n                  key={index}\n                  raised\n                  rounded>\n                    <HolderListItemComponent\n                      index={index}\n                      key={holder[\"address\"] + index}\n                      decimals={props.tokenInfo.decimals ? props.tokenInfo.decimals : \"18 \"} \n                      price={props.tokenInfo.price.rate ? props.tokenInfo.price.rate : \"1 \"} \n                      address={holder[\"address\"]}\n                      balance={holder[\"balance\"]}\n                      share={holder[\"share\"]}\n                      apiKey={props.apiKey}/>\n                </ListItem>\n                  );\n                }\n                )\n              }\n        </ListItemGroup>\n      </>\n      );\n  }\n\n \n  function changeTheme(props){\n\t   /** This function can be used to override css values */\n\t  overrideThemeVariables({\n      '--light-bg': '#E9B7B9'\n    });\n  }\n\t\n  function darkModeToggle(event){\n    setDarkMode(!darkMode);\n  }\n\n  return (\n  \n    <Card className=\"App\"\n\t    dark={darkMode}>\n      \n      <Card \n        dark={darkMode} \n        rounded={true} \n        width={700} \n        className=\"UserInput-container\">\n\n          <h1>Tokenholders Other Holdings</h1>\n\n          <Button\n            onClick={darkModeToggle}\n            rounded\n            depressed\n            color={darkMode?\"var(--white)\":\"var(--primary)\"}>\n              {!darkMode?\"dark-mode\":\"light-mode\"}\n          </Button>\n\n          {AddressInputComponent()}\n\n          \n          \n\n          <Card \n            dark={darkMode} \n            rounded\n            flat\n            width={500} \n            className=\"InputComponent-container\">\n              {ApiKeyInputComponent()}\n          </Card>\n\n          \n\n          <Card \n            dark={darkMode} \n            rounded\n            flat\n            width={500} \n            className=\"InputComponent-container\">\n              {LimitHolderInputComponent()}\n          </Card>\n\n          \n          <Card \n            dark={darkMode}\n            width={200} \n            className=\"TokenInfoComponent-container\">\n              <TokenInfoComponent \n                tokenInfo={inputTokenInfo} />\n          </Card>\n\n          <Card \n            dark={darkMode}\n            width={300} \n            className=\"ErrorComponent-container\">\n              <ErrorComponent \n                addressError={addressInputError} \n                limitError={limitInputError} \n                networkErrorHappened={networkErrorOccured}\n                networkErrorObject={networkError}\n                />\n          </Card>\n\n      </Card>\n\n      <Card \n        dark={darkMode} \n        rounded\n        width={700}\n        className=\"HolderListComponent-container\">\n          <HolderListComponent \n            holders={appState.tokenHolders}\n            numHolders={limitHolders}\n            tokenInfo={inputTokenInfo}\n            apiKey={apiKey}/>\n      </Card>\n      \n      <footer>\n          <Card \n            dark={darkMode} \n            className='footer'>\n              <p>Built with 💚 by <a \n                                    href=\"https://github.com/SimRunBot\"\n                                    target=\"_blank\">\n                                      Simon\n                                  </a>\n              </p>\n              <p>powered by <a \n                              href=\"https://Ethplorer.io\" \n                              target=\"_blank\">\n                                Ethplorer.io\n                            </a> \n              </p>\n            </Card>\n        </footer>\n\t  \n    </Card>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}